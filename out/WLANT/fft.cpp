#include "fft.h"
#include "model.h"
#include "sim_params.h"
#include <memory.h>

//[ This array contains values from 0 to 255 with reverse bit order
static unsigned char fft_reverse256[256] = {
    0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0,
    0x10, 0x90, 0x50, 0xD0, 0x30, 0xB0, 0x70, 0xF0,
    0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8,
    0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8,
    0x04, 0x84, 0x44, 0xC4, 0x24, 0xA4, 0x64, 0xE4,
    0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4,
    0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC,
    0x1C, 0x9C, 0x5C, 0xDC, 0x3C, 0xBC, 0x7C, 0xFC,
    0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2,
    0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2,
    0x0A, 0x8A, 0x4A, 0xCA, 0x2A, 0xAA, 0x6A, 0xEA,
    0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA,
    0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6,
    0x16, 0x96, 0x56, 0xD6, 0x36, 0xB6, 0x76, 0xF6,
    0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE,
    0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE,
    0x01, 0x81, 0x41, 0xC1, 0x21, 0xA1, 0x61, 0xE1,
    0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1,
    0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9,
    0x19, 0x99, 0x59, 0xD9, 0x39, 0xB9, 0x79, 0xF9,
    0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5,
    0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5,
    0x0D, 0x8D, 0x4D, 0xCD, 0x2D, 0xAD, 0x6D, 0xED,
    0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD,
    0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3,
    0x13, 0x93, 0x53, 0xD3, 0x33, 0xB3, 0x73, 0xF3,
    0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB,
    0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB,
    0x07, 0x87, 0x47, 0xC7, 0x27, 0xA7, 0x67, 0xE7,
    0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7,
    0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF,
    0x1F, 0x9F, 0x5F, 0xDF, 0x3F, 0xBF, 0x7F, 0xFF,
};
//]

//[ Rotation multiplyer tables
static double fft_WTable_re[6][32] = 
{ {-1.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000 },
{6.1232339957367660e-017, -1.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000 },
{7.0710678118654757e-001, 2.2204460492503131e-016, -7.0710678118654735e-001, -1.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000 },
{9.2387953251128674e-001, 7.0710678118654746e-001, 3.8268343236508967e-001, -1.1102230246251565e-016, -3.8268343236508989e-001, -7.0710678118654768e-001, -9.2387953251128685e-001, -1.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000 },
{9.8078528040323043e-001, 9.2387953251128674e-001, 8.3146961230254524e-001, 7.0710678118654746e-001, 5.5557023301960218e-001, 3.8268343236508973e-001, 1.9509032201612825e-001, 5.5511151231257827e-017, -1.9509032201612814e-001, -3.8268343236508956e-001, -5.5557023301960196e-001, -7.0710678118654724e-001, -8.3146961230254490e-001, -9.2387953251128629e-001, -9.8078528040322988e-001, -9.9999999999999944e-001, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000 },
{9.9518472667219693e-001, 9.8078528040323054e-001, 9.5694033573220894e-001, 9.2387953251128685e-001, 8.8192126434835516e-001, 8.3146961230254535e-001, 7.7301045336273710e-001, 7.0710678118654768e-001, 6.3439328416364571e-001, 5.5557023301960251e-001, 4.7139673682599798e-001, 3.8268343236509006e-001, 2.9028467725446261e-001, 1.9509032201612847e-001, 9.8017140329560756e-002, 9.7144514654701197e-017, -9.8017140329560576e-002, -1.9509032201612830e-001, -2.9028467725446250e-001, -3.8268343236509000e-001, -4.7139673682599798e-001, -5.5557023301960262e-001, -6.3439328416364604e-001, -7.0710678118654824e-001, -7.7301045336273777e-001, -8.3146961230254612e-001, -8.8192126434835605e-001, -9.2387953251128785e-001, -9.5694033573221005e-001, -9.8078528040323165e-001, -9.9518472667219815e-001, -1.0000000000000013e+000 } };

static double fft_WTable_im[6][32] = 
{ {1.2246467991473532e-016, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000 },
{1.0000000000000000e+000, 1.2246467991473532e-016, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000 },
{7.0710678118654746e-001, 1.0000000000000000e+000, 7.0710678118654768e-001, 2.7755575615628914e-016, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000 },
{3.8268343236508978e-001, 7.0710678118654757e-001, 9.2387953251128674e-001, 1.0000000000000000e+000, 9.2387953251128674e-001, 7.0710678118654746e-001, 3.8268343236508962e-001, -1.6653345369377348e-016, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000 },
{1.9509032201612825e-001, 3.8268343236508973e-001, 5.5557023301960218e-001, 7.0710678118654746e-001, 8.3146961230254512e-001, 9.2387953251128663e-001, 9.8078528040323021e-001, 9.9999999999999978e-001, 9.8078528040323021e-001, 9.2387953251128652e-001, 8.3146961230254501e-001, 7.0710678118654735e-001, 5.5557023301960207e-001, 3.8268343236508962e-001, 1.9509032201612819e-001, 5.5511151231257827e-017, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000, 0.0000000000000000e+000 },
{9.8017140329560604e-002, 1.9509032201612828e-001, 2.9028467725446239e-001, 3.8268343236508984e-001, 4.7139673682599775e-001, 5.5557023301960240e-001, 6.3439328416364571e-001, 7.0710678118654779e-001, 7.7301045336273733e-001, 8.3146961230254557e-001, 8.8192126434835538e-001, 9.2387953251128718e-001, 9.5694033573220938e-001, 9.8078528040323099e-001, 9.9518472667219748e-001, 1.0000000000000007e+000, 9.9518472667219759e-001, 9.8078528040323121e-001, 9.5694033573220960e-001, 9.2387953251128752e-001, 8.8192126434835583e-001, 8.3146961230254601e-001, 7.7301045336273777e-001, 7.0710678118654824e-001, 6.3439328416364615e-001, 5.5557023301960284e-001, 4.7139673682599825e-001, 3.8268343236509028e-001, 2.9028467725446278e-001, 1.9509032201612858e-001, 9.8017140329560798e-002, 6.9388939039072284e-017 } };
//]



/**
////////////////////////////////////////////////////////////////////////////////
// Name: fft_11a
//
// Purpose: Fixed-point fast Fourier transformation
//					
// Author: Alexandr Kozlov
//
// Parameters: x - input/output, Fixed-point complex input/output
//
//             T - input, FFT size if 2^T,
//                        WARNING! fft_WTable_x - computed only for T=6
//
//             complement - direct ( complement = 0 ) and
//                          complement ( complement = 1 )
//              
//             precision - input, Fixed-point precision 
//
//						 exp_position - input, Exponent point position,
//                                   for example: 1010.10 exp_position = 2
//
//
// Returning value: None
//////////////////////////////////////////////////////////////////////////////// */
void fft_11a( fxp_complex* x, 
              int T,
              char complement,
              unsigned precision, 
              unsigned exp_position,
              unsigned shift_control )
{
    fxp_complex S;
    unsigned k, m, s, i, j;
    unsigned Nmax = 1 << T;

    unsigned char *Ic = (unsigned char*) &i;
    unsigned char *Jc = (unsigned char*) &j;

    fxp_complex W;
    fxp_complex temp;
    fxp_complex U;
    
    char overflow_flag;

    #ifdef LOGGING
    logging( "fft_11a...\n", 1 );
    #endif

    //[ Convert precision
    for ( i = 0; i < Nmax; i++ )
    {
      #ifdef LOGGING
      sprintf( overflow_comment, "Overflow: x[%d].re\n", i );
      #endif

      x[i].re = convert_precision( x[i].re,
                                   precision,
                                   exp_position,
                                   fxp_params.FFT_precision,
                                   fxp_params.FFT_exp_position,
                                   &overflow_flag,
                                   overflow_comment );

      #ifdef LOGGING
      sprintf( overflow_comment, "Overflow: x[%d].re\n", i );
      #endif

      x[i].im = convert_precision( x[i].im,
                                   precision,
                                   exp_position,
                                   fxp_params.FFT_precision,
                                   fxp_params.FFT_exp_position,
                                   &overflow_flag,
                                   overflow_comment );
    }
    //]

    //[ Interchanging
    for( i = 1; i < Nmax - 1; i++ )
    {
      Jc[0] = fft_reverse256[Ic[3]];
      Jc[1] = fft_reverse256[Ic[2]];
      Jc[2] = fft_reverse256[Ic[1]];
      Jc[3] = fft_reverse256[Ic[0]];
      j >>= (32 - T);
      if ( i < j )
      {
        S = x[i];
        x[i] = x[j];
        x[j] = S;
      }
    }
    //]

    //[ Main loop
    for ( s = 1; s <= T; s++ )
    {
      m = 1 << s;

      #ifdef LOGGING
      sprintf( overflow_comment, "Overflow: W.re\n" );
      #endif

      W.re = convert_flp_to_fxp( 1.0, 
                                 fxp_params.FFT_precision,
                                 fxp_params.FFT_exp_position,
                                 &overflow_flag,
                                 overflow_comment );
      W.im = 0;
      
      for ( j = 0; j <= m / 2 - 1; j++ )
      {
        for ( k = j; k < Nmax; k += m )
        {
          #ifdef LOGGING
          sprintf( overflow_comment,
          "Overflow: temp = fxp_complex_mul, s=%d, j=%d, k=%d\n", s, j, k );
          #endif

          temp = fxp_complex_mul( W,  
                                  x[ k + m/2 ],
                                  fxp_params.FFT_precision,
                                  fxp_params.FFT_exp_position,
                                  &overflow_flag,
                                  overflow_comment );
                                  
          U = x[k];

          #ifdef LOGGING
          sprintf( overflow_comment,
          "Overflow: x[k] = fxp_complex_add, s=%d, j=%d, k=%d\n", s, j, k );
          #endif

          x[k] = fxp_complex_add( U,
                                  temp,
                                  fxp_params.FFT_precision,
                                  &overflow_flag,
                                  overflow_comment );

          #ifdef LOGGING
          sprintf( overflow_comment,
          "Overflow: x[ k + m/2 ] = fxp_complex_sub, s=%d, j=%d, k=%d\n", s, j, k );
          #endif

          x[ k + m/2 ] = fxp_complex_sub( U,
                                          temp,
                                          fxp_params.FFT_precision,
                                          &overflow_flag,
                                          overflow_comment );
        }

        #ifdef LOGGING
        sprintf( overflow_comment, "Overflow: W.re\n" );
        #endif

        W.re = convert_flp_to_fxp( fft_WTable_re[s-1][j],  
                                   fxp_params.FFT_precision,
                                   fxp_params.FFT_exp_position,
                                   &overflow_flag,
                                   overflow_comment );
        #ifdef LOGGING
        sprintf( overflow_comment, "Overflow: W.im\n" );
        #endif

        W.im = convert_flp_to_fxp( complement ? fft_WTable_im[s-1][j] : -fft_WTable_im[s-1][j],  
                                   fxp_params.FFT_precision,
                                   fxp_params.FFT_exp_position,
                                   &overflow_flag,
                                   overflow_comment );
      }
    }
    //]

    for ( i = 0; i < Nmax; i++ )
    {
      x[i].re >>= shift_control;
      x[i].im >>= shift_control;
    }

    #ifdef LOGGING
    logging( "fft_11a finished\n", -1 );
    #endif
}

/**
////////////////////////////////////////////////////////////////////////////////
// Name: fft_with_mapping_11a
//
// Purpose: Wraper for FFT, needed due to FFT block mapping
//          (802.11a standard p. 12)
//					
// Author: Alexandr Kozlov
//
// Parameters: x - input/output, Fixed-point complex input/output
//
//             T - input, FFT size if 2^T,
//                        WARNING! fft_WTable_x - computed only for T=6
//
//             complement - direct ( complement = 0 ) and
//                          complement ( complement = 1 )
//              
//             precision - input, Fixed-point precision 
//
//						 exp_position - input, Exponent point position,
//                                   for example: 1010.10 exp_position = 2
//
//
// Returning value: None
//////////////////////////////////////////////////////////////////////////////// */
void fft_with_mapping_11a( fxp_complex* x, 
                           int T,
                           char complement,
                           unsigned precision, 
                           unsigned exp_position,
                           unsigned shift_control )
{
  fxp_complex x_mapping[64];

  if ( complement )
  {
    memcpy( x_mapping, x + 32, 32 * sizeof( fxp_complex ) );
    memcpy( x_mapping + 32, x, 32 * sizeof( fxp_complex ) );
  }
  else
  {
    memcpy( x_mapping, x, 64 * sizeof( fxp_complex ) );
  }

  fft_11a( x_mapping,
           T,
           complement,
           precision,
           exp_position,
           shift_control );

  if ( complement )
  {
    memcpy( x, x_mapping, 64 * sizeof( fxp_complex ) );
  }
  else
  {
    memcpy( x, x_mapping + 32, 32 * sizeof( fxp_complex ) );
    memcpy( x + 32, x_mapping, 32 * sizeof( fxp_complex ) );
  }
}


#ifdef TESTING_ROUTINES
///////////////////////////////////////////////////////////////////////////////////////////
//Name:		test_fft
//Purpose:	Tests fft routines
//Author:	Vladislav Chernyshev
//Parameters: none
///////////////////////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "commonfunc.h"
void test_fft(){

  double src_data_re[]={
    0.000000, 0.312500, 0.000000, 0.000000, 
    0.000000, 0.000000, 0.375000, 0.000000, 
    0.000000, 0.000000, 0.000000, 0.000000, 
    0.000000, 0.687500, 0.000000, 0.000000, 
    0.000000, 0.000000, 0.000000, 0.000000, 
    0.000000, 0.000000, 0.000000, 0.000000, 
    0.000000, 0.000000, 0.000000, 0.000000, 
    0.000000, 0.000000, 0.000000, 0.000000, 
    0.062500, 0.187500, 0.000000, 0.000000, 
    0.000000, 0.000000, 0.562500, -0.062500, 
    0.000000, -0.625000, 0.000000, 0.000000, 
    0.000000, 0.000000, 0.000000, 0.000000, 
    -0.062500, -0.062500, 0.312500, -0.125000, 
    -0.625000, 0.000000, 0.000000, 0.000000, 
    0.000000, 0.000000, 0.000000, 0.000000, 
    0.000000, 0.062500, 0.125000, 0.187500
  };
  double src_data_im[]={
    0.187500, 0.125000, 0.062500, 0.000000, 
    0.000000, 0.000000, 0.000000, 0.000000, 
    0.000000, 0.000000, 0.000000, -0.625000, 
    -0.125000, 0.312500, -0.062500, -0.062500, 
    0.000000, 0.000000, 0.000000, 0.000000, 
    0.000000, 0.000000, -0.625000, 0.000000, 
    -0.062500, 0.562500, 0.000000, 0.000000, 
    0.000000, 0.000000, 0.187500, 0.062500, 
    0.000000, 0.000000, 0.000000, 0.000000, 
    0.000000, 0.000000, 0.000000, 0.000000, 
    0.000000, 0.000000, 0.000000, 0.000000, 
    0.000000, 0.000000, 0.000000, 0.000000, 
    0.000000, 0.000000, 0.042969, 0.000000, 
    0.000000, 0.000000, 0.000000, 0.000000, 
    0.000000, 0.023438, 0.000000, 0.000000, 
    0.000000, 0.000000, 0.019531, 0.000000 
  };
  double fft_data_re[]={
    1.312500, 0.006930, 0.717206, 0.373283, 
    0.865972, 1.672672, -0.795475, -0.609361, 
    0.564598, 0.644486, 2.024889, 0.534478, 
    -0.861602, 0.055278, 0.268702, 0.469997, 
    -0.351563, -0.805959, -0.491405, 0.144455, 
    0.477830, -0.004354, -0.086138, -0.018692, 
    0.364995, -1.033127, -0.370683, -1.145072, 
    -1.348440, 1.495683, -1.053710, -0.462958, 
    0.187500, -2.030613, 1.699485, 0.785252, 
    -2.262205, -0.250060, -2.956260, 0.263024, 
    1.857277, 0.006099, -1.421509, -1.532695, 
    0.379582, 1.221102, 1.509389, -1.965617, 
    -3.648438, 0.984217, 0.238927, 0.771273, 
    1.418403, -3.609838, 1.966552, 0.786575, 
    -0.286870, 1.374413, -0.896911, -0.784528, 
    1.330460, -0.726929, 1.646939, 1.390586
  };
  double fft_data_im[]={
    0.023438, -1.683798, 0.272827, 0.868598, 
    1.128603, 1.594864, -2.231923, -0.349785, 
    2.563369, 0.521029, 2.749166, -1.014736, 
    -3.917244, 1.966519, -0.198058, 1.703881, 
    -0.187500, -2.967166, -0.019271, 2.234382, 
    1.008807, -0.240839, -1.769661, -0.720822, 
    -0.383990, 1.712407, -1.534591, -0.298764, 
    1.603763, -1.146752, 1.660328, -0.144977, 
    -0.773438, 2.121726, -0.989888, -1.140311, 
    0.267844, -0.463417, 2.138578, 0.726956, 
    -0.563369, -0.157154, 0.792477, 1.251089, 
    0.338817, -0.685605, -0.776180, 0.333831, 
    0.937500, 0.704974, 0.072118, 0.279203, 
    1.094747, -0.072616, 0.491685, -0.597929, 
    -0.616010, 1.101535, 0.157161, -0.533014, 
    0.474664, -0.305707, 2.185230, 1.402400
  };

  fxp_complex src[64];
/*
  int fft_data2_re[]={0,0,0,0,0,0,0,0,1023,0,0,0,-1024,0,0,0,1023,0,0,0,-1024,0,0,0,-1024,0,0,0,1023,0,0,0,0,0,0,0,-1024,0,0,0,-1024,0,0,0,1023,0,0,0,1023,0,0,0,1023,0,0,0,1023,0,0,0,0,0,0,0};
  int fft_data2_im[]={0,0,0,0,0,0,0,0,1023,0,0,0,-1024,0,0,0,1023,0,0,0,-1024,0,0,0,-1024,0,0,0,1023,0,0,0,0,0,0,0,-1024,0,0,0,-1024,0,0,0,1023,0,0,0,1023,0,0,0,1023,0,0,0,1023,0,0,0,0,0,0,0};
*/  
  char overflow_flag;
  char overflow_comment[100]="";

  int i;
  double q;
  double thr1=0.047;   // error threshold value....
  double thr2=0.077;   // error threshold value....

  for(i=0;i<64;i++){
    src[i].re=convert_flp_to_fxp(src_data_re[i],10,8,&overflow_flag,overflow_comment);
    src[i].im=convert_flp_to_fxp(src_data_im[i],10,8,&overflow_flag,overflow_comment);
  }

  fft_11a(src,6,0,16,14,0);

  for(i=0;i<64;i++){
    q=convert_fxp_to_flp(src[i].re,8)-fft_data_re[i];
    if(q>thr1 || q<-thr1){
      printf("!!! FFT.re[%d] threshold exceeded! q=%f\n",i,q);
    }
    q=convert_fxp_to_flp(src[i].im,8)-fft_data_im[i];
    if(q>thr1 || q<-thr1){
      printf("!!! FFT.im[%d] threshold exceeded! q=%f\n",i,q);
    }

  }

  for(i=0;i<64;i++){
    src[i].re=convert_flp_to_fxp(fft_data_re[i],10,8,&overflow_flag,overflow_comment);
    src[i].im=convert_flp_to_fxp(fft_data_im[i],10,8,&overflow_flag,overflow_comment);
//    src[i].re=fft_data2_re[i];
//    src[i].im=fft_data2_im[i];

  }


  fft_11a(src,6,1,16,14,6);

  for(i=0;i<64;i++){
    q=convert_fxp_to_flp(src[i].re,8)-src_data_re[i];
    if(q>thr2 || q<-thr2){
      printf("!!! IFFT.re[%d] threshold exceeded! q=%f\n",i,q);
    }
    q=convert_fxp_to_flp(src[i].im,8)-src_data_im[i];
    if(q>thr2 || q<-thr2){
      printf("!!! IFFT.im[%d] threshold exceeded! q=%f\n",i,q);
    }

  }

  if(1){
    exit(1);
  }
 
}

#endif // TESTING_ROUTINES






