/** Galois Field helper functions implementation file
 *
 * @author: Andrey Efimov
 * @organization: LCA, ISS Dept@SUAI
 * @date: 04.11.2003
 */

#include "GaloisFieldInterface.h"

#include "GaloisField.h"
#include "GaloisExtendedField.h"
#include "GaloisExtendedField2mFast.h"

#include <stdio.h>

// --------------------------------------------------------------------------

// GF(2^s) generative polynomials, s <= 32
int s_gf2polys[][33] = {
	{1},
	{1,1},
	{1,1,1},
  {1,1,0,1},
	{1,1,0,0,1},

  {1,0,1,0,0,1},
  {1,1,0,0,0,0,1},
	{1,0,0,1,0,0,0,1}, 
	{1,0,1,1,1,0,0,0,1},

  {1,0,0,0,1,0,0,0,0,1},
  {1,0,0,1,0,0,0,0,0,0,1},
	{1,0,1,0,0,0,0,0,0,0,0,1},
  {1,1,0,0,1,0,1,0,0,0,0,0,1},
	
  {1,1,0,1,1,0,0,0,0,0,0,0,0,1},
	{1,1,0,0,0,0,1,0,0,0,1,0,0,0,1}, 
  {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1}, 

  {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
  {1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1},
	{1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1}, 
  {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}, 

  {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},

	{1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	
  {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}
};

// --------------------------------------------------------------------------

// GF((2^s)^m) generative polynomials
int s_gf2spolys[][15] = {
/*  s   m     coefs -> */
  { 2,  2,    2, 1, 1},
  { 2,  3,    2, 1, 1, 1},
  { 2,  4,    3, 2, 1, 0, 1},
  { 2,  5,    2, 1, 0, 0, 0, 1},
  { 2,  6,    2, 1, 1, 0, 0, 0, 1},
  { 2,  7,    3, 2, 1, 0, 0, 0, 0, 1},
  { 2,  8,    2, 1, 0, 1, 0, 0, 0, 0, 1},
  { 2,  9,    2, 1, 1, 0, 0, 0, 0, 0, 0, 1},
  { 3,  2,    2, 1, 1}, 
  { 3,  3,    4, 1, 0, 1},
  { 3,  4,    2, 1, 0, 0, 1},
  { 3,  5,    2, 1, 1, 0, 0, 1},
  { 3,  6,    4, 1, 0, 0, 0, 0, 1}, // t1
  { 4,  2,    8, 1, 1},
  { 4,  3,    8, 1, 0, 1},
  { 4,  4,    3, 2, 1, 0, 1},
  { 4,  5,    3, 2, 0, 0, 0, 1}, // t1
  { 5,  2,    4, 1, 1},
  { 5,  3,    8, 1, 0, 1},
  { 5,  4,    4, 1, 0, 0, 1}, // t1
  { 6,  2,   12, 1, 1},
  { 6,  3,   12, 1, 0, 1},
  { 7,  2,    8, 1, 1}, 
  { 7,  3,    4, 1, 0, 1},  // t1 
  { 8,  2,   12, 1, 1},     // t1
  { 8,  3,    2, 1, 0, 1},  // t1
  { 9,  2,    6, 1, 1},
  { 9,  3,   10, 1, 0, 1},
  {10,  2,    8, 1, 1},
  {10,  3,    6, 1, 0, 1},
  {11,  2,   34, 1, 1},
  {11,  3,   12, 1, 0, 1}
};

// --------------------------------------------------------------------------

/**
 * Creates GF((2^s)^m)
 */
IGaloisField* createGF2sm(int s, int m) {
  IGaloisField *gf2s = NULL, *gf2sm = NULL;

  int line = -1;
  for (int i = 0; i < sizeof(s_gf2spolys) / sizeof(s_gf2spolys[0]); i++) 
    if (s_gf2spolys[i][0] == s && s_gf2spolys[i][1] == m) {
      line = i;
      break;
    }

  if (line < 0)
    return NULL;

  gf2s = createGF2s(s);
  if (!gf2s) 
    return NULL;
  
  gf2sm = new CGaloisExtendedField(s_gf2spolys[line] + 2, m, gf2s);
  if (!gf2sm) {
    delete gf2s;
    return NULL;
  }

  return gf2sm;
}

// --------------------------------------------------------------------------

/**
 * Creates GF(2^s), s <= 32
 */
IGaloisField* createGF2s(int s) {
/*
  IGaloisField *gf2 = NULL, *gf2s = NULL;

  gf2 = new CGaloisField(2);
  if (!gf2)
    return NULL;

  gf2s = new CGaloisExtendedField(s_gf2polys[s], s, gf2);
  if (!gf2s) {
    delete gf2;
    return NULL;
  }

  return gf2s;
*/
  return new CGaloisExtendedField2mFast(s_gf2polys[s], s);
}

// --------------------------------------------------------------------------

